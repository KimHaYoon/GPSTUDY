▶ COM(Component Object Model)
   - DirectX의 프로그래밍언어 독립성과 하위 호환성을 가능하게 하는 기술
   - COM객체를 흔히 인터페이스라고 부름
   - COM 인터페이스를 다 사용하고 난 후에는 그 인터페이스의 Release메서드를 호출해 주어야함
		-> COM객체들이 자신만의 고유한 방식으로 메모리를 관리하기 때문에

▶ Divece
  1. D3D11CreateDeviceAndSwapChain(NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, iFlag, NULL, 0, D3D11_SDK_VERSION, &tDesc, &m_pSwapChain, &m_pDevice, &eLevel, &m_pContext)
		->장치와 장치 문맥, 교환 사슬을 생성하는 함수
   - pAdapter : 생성할 장치를 나타내는 디스플레이 어댑터 지정
		-> 매개변수에 NULL or 0을 지정하면 기본 디스플레이 어댑터가 사용됨 
   - DriverType : 렌더링에 3차원 그래픽 가속이 적용시키기 위해 D3D_DRIVER_TYPE_HARDWARE를 지정
   - Software : 소프트웨어 구동기를 지정
		-> 하드웨어를 사용해서 렌더링을 하므로 매개변수에 항상 NULL값을 지정함
   - Flags : D3D11_CREATE_DEVICE_DEBUG
		-> 디버그 모드 빌드를 하기 위해 
   - pFeatureLevels : D3D_FEATURE_LEVEL 형식 원소들의 배열
		-> NULL을 지정하면 지원되는 최고 기능 수준이 선택됨(우리는 D3D_FEATURE_LEVEL_11)
   - FeatureLevels :  pFeatureLevels의 D3D_FEATURE_LEVEL 원소 개수
		-> pFeatureLevels을 NULL로 지정했기 때문에 0으로 지정하면 됨
   - SDKVersion : SDK버전
		-> 항상 D3D11_SDK_VERSION을 지정
   - pSwapChainDesc : 교환 사슬 서술 구조체를 가리키는 포인터
   - ppSwapChain : 돌려받을 생성된 교환 사슬 인터페이스
   - ppDevice : 함수가 생성한 장치를 돌려준다
		-> m_pDevice에 장치를 돌려 받음
   - pFeatureLevel : pFeatureLevels 배열에서 처음으로 지원 되는 기능을 돌려준다
		-> pFeatureLevels를 NULL로 했기 때문에 지원되는 가장 높은 기능을 돌려주지만 D3D_FEATURE_LEVEL_11_0로 지정
   - ppImmediateContext : 생성된 장치 문맥을 돌려준다
		-> m_pContext에 장치 문맥을 돌려받음

▶ 파이프라인(Pipleline)
  1. 렌더링 파이프라인 : 메모리 자원들을 GPU로 처리해서 하나의 렌더링된 이미지를 만들어 내는 데 쓰이는 메커니즘
	- 입력 조립기(Input Assembler) 단계
		-> 입력 조립기의 주된 임무는 파이프라인의 나머지 부분이 사용할 정점들을 정확하게 조립하는 것
		-> ID3D11DeviceContext::IASetVertexBuffers 메서드를 이용해서 여러 개의 정점 버퍼들을 입력 조립기에 연결
		-> 정점 버퍼들만 제공하는 경우 입력 조립기는 그냥 정점 버퍼들에 있는 순서대로 정점자료를 해석한다.
			=> 같은 정점(꼭짓점)을 공유하는 경우에는 정점 자료에 중복이 존재하게 됨
  2. 계산 파이프라인

▶ 정점 버퍼
   1. 버퍼(Buffer) : GPU가 정점 배열에 접근할 수 있게 정점 배열을 담아두는 특별한 자원
		-> 버퍼의 인터페이스 : ID3D11Buffer
		-> Direct3D의 버퍼들은 자료를 담을 뿐만 아니라, CPU나 GPU가 자료에 어떻게 접근할 수 있고 
		   버퍼가 파이프라인의 어디에 묶이는지에 대한 정보도 가짐
   2. 정점 버퍼 : 정점들을 담는 버퍼

▶ 스텐실 버퍼(Stencil Buffer)
   - 어떤 특수 효과를 내는 데 사용할 수 있는 화면 밖 버퍼
   - 스텐실 버퍼는 후면 버퍼, 깊이 버퍼와 해상도가 같으며, 스텐실 버퍼의 ij번째 픽셀은 후면 버퍼나 깊이 버퍼의 ij번째 픽셀과 대응됨
   - 스텐실 버퍼를 지정한 경우 그 스텐실 버퍼는 깊이 버퍼에 부착됨
   - 스텐실 버퍼는 특정 픽셀 단편들이 후면 버퍼에 기록되지 못하게 만드는 데 쓰인다.
   
   1. 깊이 · 스텐실 버퍼
		-> (= 하나의 텍스처)
	- 스텐실 버퍼는 매 프레임의 시작에서 꺠긋이 지워야 한다.
		-> 깊이 버퍼도 함께 지워진다
   2. 스텐실 판정(Stencil Test)
	- 주어진 한 픽셀을 후면 버퍼에 기록할 것인지 아닌지를 스텐실 버퍼에 근거해서 판정하는 것
	- 스텐실 적용이 활성화 된 경우 스텐실 판정은 픽셀이 래스터화되는 과정(= 출력 병합기 단계 도중에)에서 일어남
	


▶ 조명처리 샘플
	// 조명 방향을 만들어준다.
	/*float3	vLightDir = float3(-1.f, -1.f, 0.f);
	vLightDir = -normalize(vLightDir);

	// 조명방향을 뷰공간으로 변환한다.
	vLightDir = normalize(mul(float4(vLightDir, 0.f), g_matView).xyz);

	float4	vDif = float4(0.f, 1.f, 0.f, 1.f) * g_vMtrlDiffuse *
	max(0, dot(vLightDir, input.vNormal));
	float4	vAmb = float4(0.f, 0.2f, 0.f, 1.f) * g_vMtrlAmbient;

	// 정점에서 카메라를 향하는 벡터를 만들어준다.
	float3	vView = -normalize(input.vViewPos);

	// 반사벡터를 구해준다.
	float3	vR = 2.f * dot(vLightDir, input.vNormal) * input.vNormal - vLightDir;

	float4	vSpc = float4(0.f, 1.f, 0.f, 1.f) * g_vMtrlSpecular *
	pow(max(0, dot(vView, vR)), 3.2f);

	output.vColor = input.vColor * (vDif + vAmb) + vSpc;*/
	//output.vColor = float4(1.f, 1.f, 0.f, 1.f);